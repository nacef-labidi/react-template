'use strict';

const _ = require('lodash');
const packagesUtils = require('./packagesUtils');

/**
 * Enum for tri-state values.
 * @enum {string}
 */
const MESSAGE_LEVEL = {
    ERROR: 'ERROR',
    WARN: 'WARN',
    INFO: 'INFO'
};

class Context2 {
    constructor() {
        this.messages = [];
        this.color = true;
        this.cwd = process.cwd();
        this.packagesDir = packagesUtils.defaults.packagesDir;
        this.sourceMain = packagesUtils.defaults.sourceMain;
        this.testMain = packagesUtils.defaults.testMain;
        this.testMainTemplate = packagesUtils.defaults.testMainTemplate;
        this.rjsMainTemplate = packagesUtils.defaults.rjsMainTemplate;
        this.rjsMainMin = packagesUtils.defaults.rjsMainMin;
    }

    report(msg) {
        console.log(msg);
    }

    verbose(message) {
        if (this.options.verbose) {
            this.report(message);
        }
    }
    info(msg, file, line, column) {
        this.issue(MESSAGE_LEVEL.INFO, msg, file, line, column);
    }
    warn(msg, file, line, column) {
        this.issue(MESSAGE_LEVEL.WARN, msg, file, line, column);
    }
    error(msg, file, line, column) {
        this.issue(MESSAGE_LEVEL.ERROR, msg, file, line, column);
    }

    issue(level, msg, file, line, column) {
        this.messages.push({level, msg, file: file || null, line: line || -1, column: column || -1});
    }

    getMessages() {
        return this.messages;
    }

    clear() {
        this.messages = [];
    }

    hasErrors() {
        return _.some(this.messages, {level: MESSAGE_LEVEL.ERROR});
    }

    getPackagesRoot() {
        return packagesUtils.getPackagesRoot(this.cwd, this.packagesDir);
    }

    getPackageMain(packageName) {
        return packagesUtils.getPackageMain(this.cwd, packageName, this.packagesDir, this.sourceMain);
    }

    getPackageMainEntry(packageName) {
        return packagesUtils.getPackageMainEntry(this.cwd, packageName, this.packagesDir, this.sourceMain);
    }
}

module.exports = Context2;
