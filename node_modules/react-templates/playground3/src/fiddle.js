'use strict'
import React, {Component} from 'react'
import ReactDOM from 'react-dom'
import fiddleTemplate from './fiddle.rt'
import * as _ from 'lodash'
import Firebase from 'firebase'
import $ from 'jquery'

//var React = require('react');
//var fiddleTemplate = require('./fiddle.rt');

//var Fiddle = React.createClass({
//    displayName: 'Fiddle',
//    getInitialState: () => {
//        return {
//            name: 'Kok22o'
//        };
//    },
//    render: fiddleTemplate
//});
//
//module.exports = Fiddle;

//export default class Fiddle extends Component {
//    constructor() {
//        super();
//        this.state = {
//            name: 'Koko'
//        };
//    }
//    render = fiddleTemplate
//}


function generateRandomId() {
    const uuid = 'xxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = _.random(0, 15)
        return (c === 'x' ? r : r & 0x3 | 0x8).toString(16)
    })
    return uuid
}

const Fiddle = React.createClass({
    displayName: 'Fiddle',
    componentDidMount() {
        if (window.location.hash) {
            const newHash = window.location.hash.replace('#', '')
            const firebase = new Firebase('https://reacttemplates.firebaseio-demo.com/')
            firebase.child('fiddles').child(newHash).on('value', function (snapshot) {
                this.refs.playground.setState(snapshot.val())
                Firebase.goOffline()
            }.bind(this))
        } else {
            Firebase.goOffline()
        }
    },
    save() {
        const newHash = generateRandomId()
        window.location.hash = newHash
        Firebase.goOnline()

        const playgroundState = this.refs.playground.state
        const firebase = new Firebase('https://reacttemplates.firebaseio-demo.com/')
        firebase.child('fiddles').child(newHash).set(playgroundState, function () {
            Firebase.goOffline()
            alert('Saved the fiddle, you can share your url') //eslint-disable-line no-alert
        })
    },
    clear() {
        this.refs.playground.clear()
    },
    loadSample(name) {
        //require(['text!./samples/' + name + '.rt', 'text!./samples/' + name + '.code'], function (rt, code) {
        //    var currentState = {
        //        templateHTML: rt,
        //        templateProps: code
        //    };
        //    //this.updateSample(currentState);
        //    this.refs.playground.setState(currentState);
        //});

        const playground = this.refs.playground
        $.get(`samples/${name}.rt`, null, function (data/*, textStatus, jqXHR*/) {
            const rt = data
            $.get(`samples/${name}.code`, null, function (data2/*, textStatus2, jqXHR2*/) {
                const currentState = {
                    templateHTML: rt,
                    templateProps: _.template(data2)({name: 'template'})
                }
                //this.updateSample(currentState);
                playground.setState(currentState)
            })
        })
        //this.refs.playground.clear();
    },
    render: fiddleTemplate
})

module.exports = Fiddle




